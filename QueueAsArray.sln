#pragma once
#define H_QueueAsArray
#include<iostream>
using namespace std;
template <class Type>
class queuetype
{
private:
	int maxqueueSize;
	int count;
	int QueueFront;
	int QueueRare;
	Type* list;
public:
	queuetype(int sqtackSize = 100);
	void intializeQueue();
	void destroyQueue();
	bool queueisFull();
	bool queueisEmpty();
	void AddQueue(Type InsertElm);
	void DelQueue(Type& DeleteElm);
	~queuetype();
	const queuetype<Type>& operator = (const queuetype<Type>&);
	queuetype(const queuetype<Type>& otherQueue);



};

template<class Type>
 queuetype<Type>::queuetype(int qstackSize)
{
	if (qstackSize <= 0)
	{
		cout << " please enter postive number" << endl;
		cout << " creating a an array of size 100" << endl;
		maxqueueSize = 100;

	}
	else
		maxqueueSize = qstackSize;
	QueueFront = 0;
	QueueRare = maxqueueSize - 1;
	count = 0;
	list = new Type[maxqueueSize];
}

template<class Type>
void queuetype<Type>::intializeQueue()
{
	QueueFront = 0;
	QueueRare = maxqueueSize-1;
	count = 0;

}

template<class Type>
inline void queuetype<Type>::destroyQueue()
{
	intializeQueue();
}

template<class Type>
inline bool queuetype<Type>::queueisFull()
{
	return (count == maxqueueSize);
}

template<class Type>
inline bool queuetype<Type>::queueisEmpty()
{
	return (count == 0);
}

template<class Type>
inline void queuetype<Type>::AddQueue(Type InsertElm)
{
	if (!queueisFull ())
	{
		QueueRare = (QueueRare + 1) % maxqueueSize;
		count++;
		list[QueueRare] = InsertElm;

		
	}
	else
		cout << " cannot add its full" << endl;
}

template<class Type>
inline void queuetype<Type>::DelQueue(Type& DeleteElm)
{
	if (!queueisEmpty())
	{
		DeleteElm = list[QueueFront];
		count--;
		QueueFront = (QueueFront + 1) % maxqueueSize;
	}
	else
		cout << " cannot add its empty" << endl;
	
}

template<class Type>
inline queuetype<Type>::~queuetype()
{
	delete[]list;
}

template<class Type>
inline const queuetype<Type>& queuetype<Type>::operator=(const queuetype<Type>&)
{
	// TODO: insert return statement here
}

template<class Type>
inline queuetype<Type>::queuetype(const queuetype<Type>& otherQueue)
{
}

int main()
{
	queuetype<int> queue;
	int x, y;
	queue.intializeQueue();
	x = 4;
	y = 5;
	queue.AddQueue(x);
	queue.AddQueue(y);
	queue.DelQueue(x);
	queue.AddQueue(x+5);
	queue.AddQueue(16);
	queue.AddQueue(x);
	queue.AddQueue(y-3);
	cout << " queue elment:"<<endl;
	while (!queue.queueisEmpty())
	{
		queue.DelQueue(y);
		cout << " " << y;
	}
	cout << endl;
	system("pause");
	return 0;

}
